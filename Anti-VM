using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;

class VirtualizationDetector
{
    [DllImport("kernel32.dll")]
    static extern IntPtr GetModuleHandle(string lpModuleName);

    public static void DetectVirtualization()
    {
        int vmScore = 0;
        int maxScore = 0;

        // Check processor count
        maxScore += 10;
        if (Environment.ProcessorCount < 2)
        {
            vmScore += 10;
        }

        // Check RAM
        try
        {
            maxScore += 10;
            using (var searcher = new ManagementObjectSearcher("SELECT TotalPhysicalMemory FROM Win32_ComputerSystem"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    ulong memory = Convert.ToUInt64(obj["TotalPhysicalMemory"]);
                    if (memory < 4L * 1024L * 1024L * 1024L) // Less than 4GB
                    {
                        vmScore += 10;
                    }
                }
            }
        }
        catch { }

        // Check disk size
        try
        {
            maxScore += 10;
            ManagementObject disk = new ManagementObject("win32_logicaldisk.deviceid=\"C:\"");
            disk.Get();
            ulong diskSize = Convert.ToUInt64(disk["Size"]);
            if (diskSize < 100L * 1024L * 1024L * 1024L) // Less than 100GB
            {
                vmScore += 10;
            }
        }
        catch { }

        // Check for VM-related registry keys
        try
        {
            maxScore += 15;
            string[] vmKeys = {
                @"SYSTEM\CurrentControlSet\Enum\PCI\VEN_15AD",
                @"SYSTEM\CurrentControlSet\Services\VBoxSF",
                @"SOFTWARE\VMware, Inc.\VMware Tools",
                @"SOFTWARE\Oracle\VirtualBox Guest Additions",
                @"SOFTWARE\Parallels",
                @"SOFTWARE\QEMU",
                @"SYSTEM\CurrentControlSet\Services\VBoxGuest"
            };

            foreach (string key in vmKeys)
            {
                if (Microsoft.Win32.Registry.LocalMachine.OpenSubKey(key) != null)
                {
                    vmScore += 15;
                    break;
                }
            }
        }
        catch { }

        // Check installed software
        try 
        {
            maxScore += 15;
            string[] vmSoftware = {
                "VMware Tools",
                "VirtualBox Guest Additions",
                "Parallels Tools",
                "QEMU Guest Agent",
                "Virtual Machine Tools",
                "Hyper-V Integration Components"
            };

            using (var searcher = new ManagementObjectSearcher(
                "SELECT * FROM Win32_Product"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    string name = obj["Name"]?.ToString() ?? "";
                    if (Array.Exists(vmSoftware, x => name.Contains(x, StringComparison.OrdinalIgnoreCase)))
                    {
                        vmScore += 15;
                        break;
                    }
                }
            }
        }
        catch { }

        // Check running processes
        try
        {
            maxScore += 15;
            string[] vmProcesses = {
                "vmtoolsd",
                "vboxservice",
                "vboxtray",
                "vmwaretray",
                "vmwareuser",
                "vgauthservice",
                "vmacthlp",
                "vmsrvc",
                "prl_tools",
                "prl_cc",
                "qemu-ga"
            };

            foreach (Process proc in Process.GetProcesses())
            {
                if (Array.Exists(vmProcesses, x => 
                    proc.ProcessName.Contains(x, StringComparison.OrdinalIgnoreCase)))
                {
                    vmScore += 15;
                    break;
                }
            }
        }
        catch { }

        // Check for VM network adapters
        try
        {
            maxScore += 15;
            foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
            {
                string desc = nic.Description.ToLower();
                if (desc.Contains("vmware") || desc.Contains("virtual") || 
                    desc.Contains("vbox") || desc.Contains("hyper-v") ||
                    desc.Contains("parallels"))
                {
                    vmScore += 15;
                    break;
                }
            }
        }
        catch { }

        // Check BIOS info
        try
        {
            maxScore += 15;
            using (var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS"))
            {
                foreach (ManagementObject obj in searcher.Get())
                {
                    string manufacturer = obj["Manufacturer"].ToString().ToLower();
                    string version = obj["Version"].ToString().ToLower();
                    if (manufacturer.Contains("vmware") || manufacturer.Contains("virtualbox") || 
                        manufacturer.Contains("qemu") || version.Contains("virtual") ||
                        manufacturer.Contains("xen") || manufacturer.Contains("innotek"))
                    {
                        vmScore += 15;
                        break;
                    }
                }
            }
        }
        catch { }

        // Check for VM-related DLLs
        try
        {
            maxScore += 15;
            string[] vmDlls = {
                "vboxmrxnp.dll",
                "vboxvideo.dll", 
                "vmhgfs.dll",
                "vmwogl32.dll",
                "vmmouse.dll",
                "vmnetbridge.dll",
                "prlauth.dll",
                "prl_hook.dll",
                "qcam.dll"
            };

            foreach (string dll in vmDlls)
            {
                if (GetModuleHandle(dll) != IntPtr.Zero)
                {
                    vmScore += 15;
                    break;
                }
            }
        }
        catch { }

        // Check disk performance
        try
        {
            maxScore += 10;
            string testFile = Path.GetTempFileName();
            var timer = Stopwatch.StartNew();
            File.WriteAllText(testFile, new string('a', 1024 * 1024));
            timer.Stop();
            File.Delete(testFile);
            
            if (timer.ElapsedMilliseconds < 10) // Suspiciously fast
            {
                vmScore += 10;
            }
        }
        catch { }

        // Calculate percentage
        double vmProbability = (vmScore * 100.0) / maxScore;

        if (vmProbability >= 70.0)
        {
            Console.WriteLine("Not today buddy");
            Environment.Exit(0);
        }
    }
}

